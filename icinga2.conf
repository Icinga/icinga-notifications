if (!globals.contains("IcingaNotificationsProcessEventUrl")) {
	const IcingaNotificationsProcessEventUrl = "http://localhost:5680/process-event"
}
if (!globals.contains("IcingaNotificationsIcingaWebUrl")) {
	const IcingaNotificationsIcingaWebUrl = "http://localhost/icingaweb2"
}
if (!globals.contains("IcingaNotificationsAuth")) {
	// INSERT INTO source (id, type, name, listener_password_hash) VALUES (1, 'icinga2', 'Icinga 2', '$2y$10$QU8bJ7cpW1SmoVQ/RndX5O2J5L1PJF7NZ2dlIW7Rv3zUEcbUFg3z2')
	const IcingaNotificationsAuth = "source-1:correct horse battery staple"
}

// urlencode a string loosely based on RFC 3986.
//
// Char replacement will be performed through a simple lookup table based on
// the RFC's chapters 2.2 and 2.3. This, however, is limited to ASCII.
function urlencode(str) {
	var replacement = {
		// gen-delims
		":" = "%3A", "/" = "%2F", "?" = "%3F", "#" = "%23", "[" = "%5B", "]" = "%5D", "@" = "%40"

		// sub-delims
		"!" = "%21", "$" = "%24", "&" = "%26", "'" = "%27", "(" = "%28", ")" = "%29"
		"*" = "%2A", "+" = "%2B", "," = "%2C", ";" = "%3B", "=" = "%3D"

		// additionals based on !unreserved
		"\n" = "%0A", "\r" = "%0D", " " = "%20", "\"" = "%22"
	}

	var pos = 0
	var out = ""

	while (pos < str.len()) {
		var cur = str.substr(pos, 1)
		out += replacement.contains(cur) ? replacement.get(cur) : cur
		pos += 1
	}

	return out
}

object User "icinga-notifications" {
	# Workaround, types filter here must exclude Problem, otherwise no Acknowledgement notifications are sent.
	# https://github.com/Icinga/icinga2/issues/9739
	types = [ Acknowledgement, DowntimeStart, DowntimeEnd, DowntimeRemoved, Custom, FlappingStart, FlappingEnd ]
}

var baseBody = {
	"curl" = {
		order = -1
		set_if = {{ true }}
		skip_key = true
		value = {{
			// Only send events that have either severity or type set, otherwise make it a no-op by executing true.
			// This is used for preventing the EventCommand from sending invalid events for soft states.
			(len(macro("$event_severity$")) > 0 || len(macro("$event_type$")) > 0) ? "curl" : "true"
		}}
	}
	"--user" = { value = IcingaNotificationsAuth }
	"--fail" = { set_if = true }
	"--silent" = { set_if = true }
	"--show-error" = { set_if = true }
	"url" = {
		skip_key = true
		value = IcingaNotificationsProcessEventUrl
	}
}

var hostBody = baseBody + {
	"-d" = {{
		var args = {}
		args.tags.host = macro("$event_hostname$")
		args.name = macro("$event_object_name$")
		args.username = macro("$event_author$")
		args.message = macro("$event_message$")
		args.url = IcingaNotificationsIcingaWebUrl + "/icingadb/host?name=" + urlencode(macro("$host.name$"))

		var type = macro("$event_type$")
		if (len(type) > 0) {
			args.type = type
		}

		var severity = macro("$event_severity$")
		if (len(severity) > 0) {
			args.severity = severity
		}

		var extraTags = macro("$event_extra_tags$")
		if (extraTags.len() > 0) {
			args.extra_tags = extraTags
		}

		return Json.encode(args)
	}}
}

var hostExtraTags = {{
	var tags = {}
	for (group in host.groups) {
		tags.set("hostgroup/" + group, null)
	}

	return tags
}}

object NotificationCommand "icinga-notifications-host" use(hostBody, hostExtraTags) {
	command = [ /* full command line generated from arguments */ ]

	arguments = hostBody

	vars += {
		event_hostname = "$host.name$"
		event_author = "$notification.author$"
		event_message = "$notification.comment$"
		event_object_name = "$host.display_name$"
		event_extra_tags = hostExtraTags
	}

	vars.event_type = {{
		if (macro("$notification.type$") == "ACKNOWLEDGEMENT") {
			return "acknowledgement"
		} else if (macro("$notification.type$") == "DOWNTIMESTART") {
			return "downtimeStart"
		} else if (macro("$notification.type$") == "DOWNTIMEEND") {
			return "downtimeEnd"
		} else if (macro("$notification.type$") == "DOWNTIMECANCELLED") {
			return "downtimeCancelled"
		} else if (macro("$notification.type$") == "CUSTOM") {
			return "custom"
		} else if (macro("$notification.type$") == "FLAPPINGSTART") {
			return "flappintStart"
		} else if (macro("$notification.type$") == "FLAPPINGEND") {
			return "flappingEnd"
		}

		return ""
	}}

	vars.event_severity = {{
		if (macro("$notification.type$") == "PROBLEM"  || macro("$notification.type$") == "RECOVERY") {
			return macro("$host.state$") == "DOWN" ? "crit" : "ok"
		}

		return ""
	}}
}

object EventCommand "icinga-notifications-host-events" use(hostBody, hostExtraTags) {
	command = [ /* full command line generated from arguments */ ]

	arguments = hostBody

	vars += {
		event_hostname = "$host.name$"
		event_author = ""
		event_message = "$host.output$"
		event_object_name = "$host.display_name$"
		event_extra_tags = hostExtraTags
	}

	vars.event_severity = {{
		if (macro("$host.state_type$") == "HARD") {
			return macro("$host.state$") == "DOWN" ? "crit" : "ok"
		}

		return ""
	}}
}

template Host "generic-icinga-notifications-host" default {
	event_command = "icinga-notifications-host-events"
}

apply Notification "icinga-notifications-forwarder" to Host {
	command = "icinga-notifications-host"

	types = [ Acknowledgement, DowntimeStart, DowntimeEnd, DowntimeRemoved, Custom, FlappingStart, FlappingEnd ]

	users = [ "icinga-notifications" ]

	assign where true
}

var serviceBody = baseBody + {
	"-d" = {{
		var args = {}
		args.tags.host = macro("$event_hostname$")
		args.tags.service = macro("$event_servicename$")
		args.name = macro("$event_object_name$")
		args.username = macro("$event_author$")
		args.message = macro("$event_message$")
		args.url = IcingaNotificationsIcingaWebUrl + "/icingadb/service?name=" + urlencode(macro("$service.name$")) + "&host.name=" + urlencode(macro("$service.host.name$"))

		var type = macro("$event_type$")
		if (len(type) > 0) {
			args.type = type
		}

		var severity = macro("$event_severity$")
		if (len(severity) > 0) {
			args.severity = severity
		}

		var extraTags = macro("$event_extra_tags$")
		if (extraTags.len() > 0) {
			args.extra_tags = extraTags
		}

		return Json.encode(args)
	}}
}

var serviceExtraTags = {{
	var tags = {}
	for (group in service.host.groups) {
		tags.set("hostgroup/" + group, null)
	}

	for (group in service.groups) {
		tags.set("servicegroup/" + group, null)
	}

	return tags
}}

object NotificationCommand "icinga-notifications-service" use(serviceBody, serviceExtraTags) {
	command = [ /* full command line generated from arguments */ ]

	arguments = serviceBody

	vars += {
		event_hostname = "$service.host.name$"
		event_servicename = "$service.name$"
		event_author = "$notification.author$"
		event_message = "$notification.comment$"
		event_object_name = "$host.display_name$: $service.display_name$"
		event_extra_tags = serviceExtraTags
	}

	vars.event_type = {{
		if (macro("$notification.type$") == "ACKNOWLEDGEMENT") {
            return "acknowledgement"
        } else if (macro("$notification.type$") == "DOWNTIMESTART") {
            return "downtimeStart"
        } else if (macro("$notification.type$") == "DOWNTIMEEND") {
            return "downtimeEnd"
        } else if (macro("$notification.type$") == "DOWNTIMECANCELLED") {
            return "downtimeCancelled"
        } else if (macro("$notification.type$") == "CUSTOM") {
            return "custom"
        } else if (macro("$notification.type$") == "FLAPPINGSTART") {
            return "flappintStart"
        } else if (macro("$notification.type$") == "FLAPPINGEND") {
            return "flappingEnd"
        }

		return ""
	}}

	vars.event_severity = {{
	    if (macro("$notification.type$") != "PROBLEM" || macro("$notification.type$") != "RECOVERY") {
	        return ""
	    }

        var state = macro("$service.state$")
        if (state == "OK") {
            return "ok"
        } else if (state == "WARNING") {
            return "warning"
        } else if (state == "CRITICAL") {
            return "crit"
        } else { // Unknown
            return "err"
        }
	}}
}

object EventCommand "icinga-notifications-service-events" use(serviceBody, serviceExtraTags) {
	command = [ /* full command line generated from arguments */ ]

	arguments = serviceBody

	vars += {
		event_hostname = "$service.host.name$"
		event_servicename = "$service.name$"
		event_author = ""
		event_message = "$service.output$"
		event_object_name = "$host.display_name$: $service.display_name$"
		event_extra_tags = serviceExtraTags
	}

	vars.event_severity = {{
		if (macro("$service.state_type$") == "HARD") {
			var state = macro("$service.state$")
			if (state == "OK") {
				return "ok"
			} else if (state == "WARNING") {
				return "warning"
			} else if (state == "CRITICAL") {
				return "crit"
			} else { // Unknown
				return "err"
			}
		}

		return ""
	}}
}

template Service "generic-icinga-notifications-service" default {
	event_command = "icinga-notifications-service-events"
}

apply Notification "icinga-notifications-forwarder" to Service {
	command = "icinga-notifications-service"

	types = [ Acknowledgement, DowntimeStart, DowntimeEnd, DowntimeRemoved, Custom, FlappingStart, FlappingEnd ]

	users = [ "icinga-notifications" ]

	assign where true
}
